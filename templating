With configuration templating we have a template file and we also have a set of variables we want to populate into a template. This output is generated files. 

With ansible the variables can be in the inventory file, within the playbook, using roles or using group or host vars files. 

You can use the Python jinja2 templating module for templating. This is dedicated for templating and is used to create output files.

---
- name: Test templating
  hosts: cisco
  tasks:
    - template:
        src: test_template_1.j2 <--- src jinja2 template
        dest: "./CFGS/{{ inventory_hostname }}.txt" <--- the file we create

 ---- test_template_1.j2

---
ip name-server {{ name_server1 }} <-- grabs the variable from group_vars or wherever the variable is specified. 
ip name-server {{ name_server2 }}

 ---- /group_vars/all.yml

---
name_server1: 8.8.8.8
name_server2: 8.8.4.4

default_domain: bogus1.com

ntp1: 130.126.24.24
ntp2: 152.2.21.1


!Here we setup a template using multiple device types. We use conditionals "if statements" to handle the logic needed to create the different configs per device.

---
- name: Test templating
  hosts: cisco:nxos:arista <-- we specify hosts with different platforms
  tasks:
    - template:
        src: test_template_2.j2
        dest: "./CFGS/{{ inventory_hostname }}.txt"

---- test_template_2.j2

{% if platform == "ios" %} <-- here we imbed logic so the command syntax can very per platform
ip name-server {{ name_server1 }}
ip name-server {{ name_server2 }}
{% elif platform == "eos" %}
ip name-server vrf default {{ name_server1 }}
ip name-server vrf default {{ name_server2 }}
{% elif platform == "nxos" %}
ip name-server {{ name_server1 }} {{ name_server2 }}
{% endif %}

 ---- group_vars/cisco.yml

 ---
platform: ios <-- here we specify the platform for the template

creds_core_ssh:
  host: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  timeout: 60

creds_napalm:
  hostname: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  dev_os: "ios"
  optional_args: {}

!Now we use for loops there is no j2 in this it creates all of the interfaces and pushes them to the arista switches. 

---
- name: Templating with a for loop
  hosts: arista
  tasks:
    - template:
        src: test_template_3.j2
        dest: "./CFGS/{{ inventory_hostname }}.txt"


---- test_template_3.j2

interface Ethernet1
   switchport mode access
   switchport access vlan 20
   spanning-tree portfast
   spanning-tree bpduguard enable
!
interface Ethernet2
   switchport mode access
   switchport access vlan 20
   spanning-tree portfast
   spanning-tree bpduguard enable
!
------ snippit with many more interfaces ------

!Here we have the same output as above but we use the range config to create the port ranges in the template. 

---
- name: Templating with a for loop
  hosts: arista
  tasks:
    - template:
        src: test_template_4.j2
        dest: "./CFGS/{{ inventory_hostname }}.txt"


{% for port_number in range(1, 8) %}
interface Ethernet{{ port_number }}
   switchport mode access
   switchport access vlan 20
   spanning-tree portfast
   spanning-tree bpduguard enable
!
{% endfor %}

!Here we use napalm_get_facts to retrieve information about the device. In particular we get the interface information. One of the variables that comes back from running this is the napalm_interface_list which is a list of each interface name. 

---
- name: Templating with a for loop
  hosts: arista
  tasks:
    - name:  Retrieve facts about device
      napalm_get_facts:
        provider: "{{ creds_napalm }}"
      tags: interface_tag

    - debug:
        var: napalm_interface_list

    - template:
        src: test_template_5.j2
        dest: "./CFGS/{{ inventory_hostname }}.txt"

 ---- test_template_5.j2

{% for interface in napalm_interface_list %} <-- we create a for loop to go through each list in the napalm_interface_list variable
{% if interface not in ["Management1", "Vlan1"]: %} <-- we then programatically tell ansible to skip management1 and vlan1
interface {{ interface }}
   switchport mode access
   switchport access vlan 20
   spanning-tree portfast
   spanning-tree bpduguard enable
!
{% endif %}
{% endfor %}

!You can also combine templating and roles in your playbooks.

---
- name: Templating using roles
  hosts: cisco:nxos:arista <-- we choose these three groups so there will be unique config per platform
  roles:
    - {role: 'cisco_ios', when: platform == "ios"} <-- we specify when to run the particular playbook
    - {role: 'cisco_nxos', when: platform == "nxos"}
    - {role: 'arista', when: platform == "eos"}

/roles/cisco_ios/tasks/main.yml

- template:
    src: dns.j2
    dest: "./CFGS/{{ inventory_hostname }}.txt"

/roles/cisco_ios/templates/dns2.j2

ip name-server {{ name_server1 }}
ip name-server {{ name_server2 }}

/group_vars/cisco.yml

---
platform: ios <-- here we specify the platform type

creds_core_ssh:
  host: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  timeout: 60

creds_napalm:
  hostname: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  dev_os: "ios"
  optional_args: {}

/group_vars/all.yml

---
name_server1: 8.8.8.8 <-- here we have the name server config
name_server2: 8.8.4.4

default_domain: bogus1.com

ntp1: 130.126.24.24
ntp2: 152.2.21.1

!You can also generate full configuration files as well. Here we specify with_items and the hostname and site specific variables to loop through when creating the individual files using the jinja2 template. Here this operates on localhost instead of on a group


---
- name: Generate Default Arista Configurations
  hosts: local
  tasks:
    - name: Generate Arista Configs
      template: src=arista_sw.j2 dest=CFGS_2/{{ item.hostname }}.txt
      with_items:
        - { hostname: pynet-sw1, ip_address: 10.220.88.28, eapi_secret: $1$FIOFmaYx$FVZOCJ71hnXLN7HPXis3M. }
        - { hostname: pynet-sw2, ip_address: 10.220.88.29, eapi_secret: $1$Ju4G77CG$ialRy.8iozRV/.YpAqlZw1 }
        - { hostname: pynet-sw3, ip_address: 10.220.88.30, eapi_secret: $1$AUB.4YgZ$atUpFywcTwX84x2POAt9C0 }
        - { hostname: pynet-sw4, ip_address: 10.220.88.31, eapi_secret: $1$kGsls/wg$brwRo1OGS0OaTdnKuWHQG/ }
        - { hostname: pynet-sw5, ip_address: 10.220.88.32, eapi_secret: $1$Kt0.fwmk$5Q14WW76.w5xBIHwMHNX0/ }
        - { hostname: pynet-sw6, ip_address: 10.220.88.33, eapi_secret: $1$ezGsMTgk$g5ROc4mDuF/4CnMJo0aPV0 }
        - { hostname: pynet-sw7, ip_address: 10.220.88.34, eapi_secret: $1$jMZJZ7Ig$w6ajfFPHU1w5T9e3Rsc84. }
        - { hostname: pynet-sw8, ip_address: 10.220.88.35, eapi_secret: $1$zBpvd4C5$LDS6j8PPt6rHikh79Hi46/ }

/arista_sw.j2

!
transceiver qsfp default-mode 4x10G
!
hostname {{ item.hostname }} <-- this corresponds to pynet-sw1 with the first run of the playbook. 
!
ntp server 130.126.24.24
!
spanning-tree mode mstp
!
aaa authorization exec default local
!
no aaa root
!
username admin privilege 15 role network-admin secret 5 $1$aM6w809x$tgkc6ZGhcScvELVKVHq3n0
username admin1 privilege 15 secret 5 $1$7kD0oS/t$wXhtTFwnWwnlPFKWwXoJ70
username eapi secret 5 {{ item.eapi_secret }}
username pyclass privilege 15 secret 5 $1$C3VfUfcO$86t4iqCX60yW.NIR8d2Lh0
!
clock timezone America/Los_Angeles
!
interface Ethernet1
   spanning-tree portfast
!
interface Ethernet2
!
interface Ethernet3
!
interface Ethernet4
!
interface Ethernet5
!
interface Ethernet6
!
interface Ethernet7
!
interface Management1
   shutdown
!
interface Vlan1
   ip address {{ item.ip_address }}/24 <-- this corresponds to 10.220.88.28 with the first run of the playbook
!
ip route 0.0.0.0/0 10.220.88.1
!
ip routing
!
management api http-commands
   no shutdown
!
!
end

!We now create a playbook to operate on the arista group instead of localhost. 


---
- name: Generate Default Arista Configurations
  hosts: arista
  tasks:
    - name: Generate Arista Configs
      template: src=arista_sw_4.j2 dest=CFGS_2/{{ hostname }}.txt <-- here we specify the source template and the destination on the same line. 

---- /arista_sw_4.j2

!
transceiver qsfp default-mode 4x10G
!
hostname {{ hostname }} <-- variables are done simlar to how they where above but we do not need to specify item. before the name. This information is pulled from host_vars directory
!
ntp server {{ ntp1 }}
!
spanning-tree mode mstp
!
aaa authorization exec default local
!
no aaa root
!
{% for user in users %} <-- loops through users
{% if user.role is defined %} <-- This checks if there is a user role defined and if so does the below config
username {{ user.username }} privilege {{ user.privilege }} role {{ user.role }} secret 5 {{ user.secret }}
{% elif user.privilege is not defined %} <-- if there is no role defined then it does this config
username {{ user.username }} secret 5 {{ user.secret }}
{% else %}
username {{ user.username }} privilege {{ user.privilege }} secret 5 {{ user.secret }}
{% endif %}
{% endfor %}
!
clock timezone America/Los_Angeles
!
interface Ethernet1
   spanning-tree portfast
!
{% for intf_num in range(2, 8) %} <-- this for loop will add the below config for ethernet2 - 7
interface Ethernet{{ intf_num }}
!
{% endfor %}
interface Management1
   shutdown
!
interface Vlan1
   ip address {{ mgmt_ip_address }}/24
!
ip route 0.0.0.0/0 {{ default_gateway }}
!
ip routing
!
management api http-commands
   no shutdown
!
!
end

/group_vars/arista.yml

---
platform: eos
default_gateway: 10.220.88.1
users: <-- here we have a list called users
  - { username: admin, privilege: 15, role: network-admin, secret: $1$aM6w809x$tgkc6ZGhcScvELVKVHq3n0 }
  - { username: admin1, privilege: 15, secret: $1$7kD0oS/t$wXhtTFwnWwnlPFKWwXoJ70 }
  - { username: eapi, secret: "{{ eapi_secret }}" }
  - { username: pyclass, privilege: 15, secret: $1$C3VfUfcO$86t4iqCX60yW.NIR8d2Lh0 }

creds_core_ssh:
  host: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  transport: cli
  timeout: 60

creds_core_eapi:
  host: "{{ ansible_host }}"
  username: "{{ username }}"
  password: "{{ password }}"
  transport: eapi
  use_ssl: True
  validate_certs: no

/group_vars/all.yml

---
name_server1: 8.8.8.8
name_server2: 8.8.4.4

default_domain: bogus1.com

ntp1: 130.126.24.24
ntp2: 152.2.21.1

/host_vars/pynet-sw5/main.yml <-- there is a unique host var directory with a main.yml for each device

---
hostname: pynet-sw5
mgmt_ip_address: 10.220.88.32
eapi_secret: $1$Kt0.fwmk$5Q14WW76.w5xBIHwMHNX0/

!Pushing configs to devices. Here we generate the DNS configs using our jinja2 template and then use Ansible core modules to push the configs to the devices. This is a partial config push and not a full config push


---
- name: Generate configs for name-servers
  hosts: cisco:nxos:arista
  tasks:
    - name: "Delete old config files"
      file:
        path: "./CFGS/{{ inventory_hostname }}.txt"
        state: absent <-- this deletes the old config files

    - name: "Generating config files"
      template:
        src: gen_dns.j2 <-- here we re-create the DNS files.
        dest: "./CFGS/{{ inventory_hostname }}.txt"

- name: Push IOS configs
  hosts: cisco
  tasks:
    - ios_config:
        provider: "{{ creds_core_ssh }}"
        src: "./CFGS/{{ inventory_hostname }}.txt"

- name: Push NX-OS configs
  hosts: nxos
  tasks:
    - nxos_config:
        provider: "{{ creds_core_ssh }}"
        src: "./CFGS/{{ inventory_hostname }}.txt"

- name: Push EOS configs
  hosts: arista
  tasks:
    - eos_config:
        provider: "{{ creds_core_ssh }}"
        src: "./CFGS/{{ inventory_hostname }}.txt"


--- /gen_dns.j2

{% if platform == "ios" %}
ip name-server {{ name_server1 }}
ip name-server {{ name_server2 }}
{% elif platform == "eos" %}
ip name-server vrf default {{ name_server1 }}
ip name-server vrf default {{ name_server2 }}
{% elif platform == "nxos" %}
ip name-server {{ name_server1 }} {{ name_server2 }}
{% endif %}

!Pushing full configuration to devices

---
- name: Generate full configs for Arista
  hosts: arista
  tasks:
    - name: "Delete old config files"
      file: <-- we start by deleting stale configs
        path: "./CFGS/{{ inventory_hostname }}.txt"
        state: absent
      tags: generate_cfgs

    - name: Generate Arista Configs
      template:  <-- here we generate the arista config
        src: arista_gen_config.j2
        dest: "CFGS/{{ inventory_hostname }}.txt"
      tags: generate_cfgs

    - name: NAPALM push configs to devices
      napalm_install_config:  <-- here we use NAPALM to push the configuration to the device. 
        provider: "{{ creds_napalm }}"
        config_file: "CFGS/{{ inventory_hostname }}.txt"
        commit_changes: False
        replace_config: True <-- this will ensure previous config is replaced
        diff_file: "DIFFS/{{ inventory_hostname }}.txt"
      tags: push_cfgs


 ---- arista_gen_config.j2

!
transceiver qsfp default-mode 4x10G
!
hostname {{ hostname }}
!
ntp server {{ ntp1 }}
!
spanning-tree mode mstp
!
aaa authorization exec default local
!
no aaa root
!
{% for user in users %}
{% if user.role is defined %}
username {{ user.username }} privilege {{ user.privilege }} role {{ user.role }} secret 5 {{ user.secret }}
{% elif user.privilege is not defined %}
username {{ user.username }} secret 5 {{ user.secret }}
{% else %}
username {{ user.username }} privilege {{ user.privilege }} secret 5 {{ user.secret }}
{% endif %}
{% endfor %}
!
clock timezone America/Los_Angeles
!
interface Ethernet1
   spanning-tree portfast
!
{% for intf_num in range(2, 8) %}
interface Ethernet{{ intf_num }}
!
{% endfor %}
interface Management1
   shutdown
!
interface Vlan1
   ip address {{ mgmt_ip_address }}/24
!
ip route 0.0.0.0/0 {{ default_gateway }}
!
ip routing
!
management api http-commands
   no shutdown
!
!
end

!Test includes and macros

---
- name: Configuration templating using include statement
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Generate configuration files
      template: 
        src: branch_office_1.j2 
        dest: "CFGS/{{ item.hostname }}.txt"
      with_items:
        - {hostname: pynet-rtr1, default_gateway: 10.10.10.1}
        - {hostname: pynet-rtr2, default_gateway: 10.10.20.1}

 --- branch_office_1.j2

service timestamps debug datetime msec localtime show-timezone
service timestamps log datetime msec localtime show-timezone
!
!
{% include 'hostname.j2' %} <-- this will include another jinja2 template inside of this one. 
!
!
ip default-gateway {{item.default_gateway}}
!
line con 0
line vty 0 4 
 login
line vty 5 15
 login
!
!
end

 --- hostname.j2

hostname {{ item.hostname }} <-- this will add the hostname which variable is in the main playbook

!Here is another example this time specify a jinja template in one of our variables. We do this in this example because the interfaces on the routers varies and the template specifies only the interface portion of the config. We also use includes to embed j2 templates.

---
- name: Configuration templating using include statement
  hosts: local
  gather_facts: false
  tasks:
    - name: Generate configuration files
      template: 
        src: branch_office_2.j2 
        dest: "CFGS/{{ item.hostname }}.txt"
      with_items:
        - {hostname: pynet-rtr1, default_gateway: 10.10.10.1, model_interfaces: 881_interfaces.j2,
           ip_addr: 10.10.10.10, netmask: 255.255.255.0}
        - {hostname: pynet-rtr2, default_gateway: 10.10.20.1, model_interfaces: 891_interfaces.j2,
           ip_addr: 10.10.10.10, netmask: 255.255.255.0}


--- branch_office_2.j2

service timestamps debug datetime msec localtime show-timezone
service timestamps log datetime msec localtime show-timezone
!
hostname {{ item.hostname }} <-- this is passed in via the playbook
!
!
{% include item.model_interfaces %}
!
ip default-gateway {{ item.default_gateway }}
!
line con 0
line vty 0 4 
 login
line vty 5 15
 login
!
!
end

--- 881_interfaces.j2

interface FastEthernet0
 no ip address
!
interface FastEthernet1
 no ip address
!
interface FastEthernet2
 no ip address
!
interface FastEthernet3
 no ip address
!
interface FastEthernet4
 ip address {{ item.ip_addr }} {{ item.netmask }} <-- this is passed in via the playbook
 duplex auto
 speed auto
!
interface Vlan1
no ip address

!Here we use macros which are the equivelent of a Python function. 

{% macro intf_trunk(native_vlan=1, trunk_allowed_vlans=1) -%} <-- intf_trunk is the Python function name. native_vlan and trunk_allowed_vlans are arguments that are passed in. We set the default value here at 1.
 switchport mode trunk
 switchport trunk native vlan {{ native_vlan }}
 switchport trunk allowed vlan {{ trunk_allowed_vlans }}
{%- endmacro %}
{% macro intf_access(vlan=1) -%} 
 switchport mode access
 switchport access vlan {{ vlan }}
{%- endmacro %}
!
!
service timestamps debug datetime msec localtime show-timezone
service timestamps log datetime msec localtime show-timezone
!
hostname {{ item.hostname }}
!
!
{% for intf in item.interfaces %} <-- since the interfaces are passed to us via a list we iterate through them here. 
interface {{ intf.name }}
 no ip address
{% if intf.switchport_mode == 'trunk' %} <-- here we check to see if the mode is set to trunk and if so execute the below code. 
 {{ intf_trunk(native_vlan=1, trunk_allowed_vlans="1,100") }} <-- here we call upon the macro
{% elif intf.switchport_mode == 'access' %}
 {{ intf_access(vlan=100) }}
{% endif %}
!
{% endfor %}
!
!
ip default-gateway {{ item.default_gateway }}
!
line con 0
line vty 0 4 
 login
line vty 5 15
 login
!
!
end

---
- name: Configuration templating using include statement
  hosts: localhost
  gather_facts: false
  tasks:

  - name: Generate configuration files
    template: src=access_switch_2.j2 dest=CFGS/{{ item.hostname }}.txt
    with_items:
      - {hostname: pynet-sw1, default_gateway: 10.10.10.1,
         ip_addr: 10.10.10.10, netmask: 255.255.255.0, 
         interfaces: [
            {name: FastEthernet0, switchport_mode: access}, <-- here we specify wether the mode is access or trunk
            {name: FastEthernet1, switchport_mode: access},
            {name: FastEthernet2, switchport_mode: access},
            {name: FastEthernet3, switchport_mode: trunk},
            {name: FastEthernet4, switchport_mode: trunk}
        ]}
      - {hostname: pynet-sw2, default_gateway: 10.10.20.1,
         ip_addr: 10.10.10.10, netmask: 255.255.255.0,
         interfaces: [
            {name: FastEthernet0, switchport_mode: access},
            {name: FastEthernet1, switchport_mode: access},
            {name: FastEthernet2, switchport_mode: access},
            {name: FastEthernet3, switchport_mode: trunk},
            {name: FastEthernet4, switchport_mode: trunk}
         ]}
